<?php

namespace {{ namespace }}\Controller;


use Symfony\Component\HttpFoundation\Request,
    Symfony\Component\HttpFoundation\Response,
    Symfony\Component\Routing\Exception\ResourceNotFoundException,
    Symfony\Component\Validator\Constraints as Assert
    ;

use FOS\RestBundle\View\RouteRedirectView,
    FOS\RestBundle\View\View,
    FOS\RestBundle\Controller\FOSRestController,
    FOS\RestBundle\Controller\Annotations,
    FOS\RestBundle\Request\ParamFetcherInterface,
    FOS\RestBundle\Util\Codes;

use Nelmio\ApiDocBundle\Annotation\ApiDoc;

use Redking\Bundle\CoreRestBundle\Controller\BaseRestController,
    Redking\Bundle\CoreRestBundle\Exception\InvalidFormException,
    Redking\Bundle\CoreRestBundle\Handler\BaseHandler;


class {{ controller }} extends BaseRestController
{

    /**
     * Récupère les {{ document_name }}
     *
     * @Annotations\QueryParam(name="offset", requirements="\d+", nullable=true, description="Offset from which to start listing objects.")
     * @Annotations\QueryParam(name="limit", requirements="\d+", default="10", description="How many objects to return.")
     * @Annotations\QueryParam(name="sort_field", requirements="\w+", description="Field to use for sorting.", nullable=true)
     * @Annotations\QueryParam(name="sort_order", requirements="^asc|desc$", description="Order of the sort.", nullable=true)
     *
     * @param Request               $request      the request object
     * @param ParamFetcherInterface $paramFetcher param fetcher service
     * 
     * @ApiDoc()
     */
    public function get{{ document_name }}sAction(Request $request, ParamFetcherInterface $paramFetcher)
    {
        return parent::getObjectsAction($request, $paramFetcher);
    }

    /**
     * Récupère un {{ document_name }}
     * 
     * @param  string $id Identifiant
     * @return [type]     [description]
     *
     * @ApiDoc()
     */
    public function get{{ document_name }}Action($id)
    {
        return parent::getObjectAction($id);
    }

    /**
     * Crée un {{ document_name }}
     *
     * @ApiDoc(
     *   resource = true,
     *   description = "Crée un {{ document_name }}",
     *   input = "{{ namespace }}\Form\{{ document_name }}Type",
     *   statusCodes = {
     *     200 = "Returned when successful",
     *     400 = "Returned when the form has errors"
     *   }
     * )
     */
    public function post{{ document_name }}Action(Request $request)
    {
        return parent::postObjectAction($request);
    }

    /**
     * Met à jour un {{ document_name }}
     *
     * @ApiDoc(
     *   resource = true,
     *   description = "Mets à jour un {{ document_name }}",
     *   input = "{{ namespace }}\Form\{{ document_name }}Type",
     *   statusCodes = {
     *     200 = "Returned when successful",
     *     400 = "Returned when the form has errors"
     *   }
     * )
     */
    public function put{{ document_name }}Action(Request $request, $id)
    {
        return parent::putObjectAction($request, $id);
    }

    /**
     * Supprime un {{ document_name }}
     *
     * @ApiDoc()
     */
    public function delete{{ document_name }}Action($id)
    {
        return parent::deleteObjectAction($id);
    }

    
 }
